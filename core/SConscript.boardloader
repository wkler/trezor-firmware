# pylint: disable=E0602

import os

TREZOR_MODEL = ARGUMENTS.get('TREZOR_MODEL', 'T')

CCFLAGS_MOD = ''
CPPPATH_MOD = []
CPPDEFINES_MOD = []
SOURCE_MOD = []

# modtrezorcrypto
CCFLAGS_MOD += '-Wno-sequence-point '
CPPPATH_MOD += [
    'vendor/trezor-crypto',
]
CPPDEFINES_MOD += [
    'AES_128',
    'AES_192',
    'USE_KECCAK',
    'ED25519_NO_PRECOMP',
]
SOURCE_MOD += [
    'vendor/trezor-crypto/blake2s.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-32bit.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-helpers.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-32bit-tables.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-impl-base.c',
    'vendor/trezor-crypto/ed25519-donna/modm-donna-32bit.c',
    'vendor/trezor-crypto/memzero.c',
    'vendor/trezor-crypto/sha2.c',
]

# modtrezorui
CPPPATH_MOD += [
        'vendor/micropython/lib/uzlib',
]
SOURCE_MOD += [
    #'embed/extmod/modtrezorui/display.c',
    'embed/extmod/modtrezorui/font_bitmap.c',
]

SOURCE_STMHAL = [
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd_ex.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_spi.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sram.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_fmc.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_sdmmc.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_usb.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c',
    'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c',
    'vendor/micropython/lib/stm32lib/CMSIS/STM32H7xx/Source/Templates/system_stm32h7xx.c',
]

SOURCE_BOARDLOADER = [
    'embed/boardloader/startup.s',
    'embed/boardloader/main.c',
]

SOURCE_TREZORHAL = [
    'embed/trezorhal/common.c',
    #'embed/trezorhal/dma.c',
    'embed/trezorhal/image.c',
    #'embed/trezorhal/flash.c',
    'embed/trezorhal/lowlevel.c',
    'embed/trezorhal/mini_printf.c',
    #'embed/trezorhal/sdcard.c',
    'embed/trezorhal/stm32.c',
    'embed/trezorhal/systick.c',
    'embed/trezorhal/rng.c',
    'embed/trezorhal/util.s',
    'embed/trezorhal/vectortable.s',
]

env = Environment(ENV=os.environ, CFLAGS='%s -DPRODUCTION=%s' % (ARGUMENTS.get('CFLAGS', ''), ARGUMENTS.get('PRODUCTION', '0')))
PREFIX = r'~/Desktop/arm_compiler/gcc-arm-none-eabi-10.3-2021.10/bin/'
env.Replace(
    AS= PREFIX + 'arm-none-eabi-as',
    AR= PREFIX + 'arm-none-eabi-ar',
    CC= PREFIX + 'arm-none-eabi-gcc',
    LINK= PREFIX + 'arm-none-eabi-gcc',
    SIZE= PREFIX + 'arm-none-eabi-size',
    STRIP= PREFIX + 'arm-none-eabi-strip',
    OBJCOPY= PREFIX + 'arm-none-eabi-objcopy', )

env.Replace(
    TREZOR_MODEL=TREZOR_MODEL, )

if TREZOR_MODEL == 'T':
    CPU_ASFLAGS = '-mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-sp-d16'
    CPU_CCFLAGS = '-mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-sp-d16 -mtune=cortex-m7 '
    CPU_MODEL   = 'STM32H757xx'
elif TREZOR_MODEL == '1':
    CPU_ASFLAGS = '-mthumb -mcpu=cortex-m3 -mfloat-abi=soft'
    CPU_CCFLAGS = '-mthumb -mtune=cortex-m3 -mcpu=cortex-m3 -mfloat-abi=soft '
    CPU_MODEL   = 'STM32F405xx'
else:
    raise ValueError('Unknown Trezor model')

env.Replace(
    COPT=env.get('ENV').get('OPTIMIZE', '-Os'),
    CCFLAGS='$COPT '
    '-g3 '
    '-nostdlib '
    '-std=gnu99 -Wall -Werror -Wdouble-promotion -Wpointer-arith -Wno-missing-braces -fno-common '
    '-fsingle-precision-constant -fdata-sections -ffunction-sections '
    '-ffreestanding '
    '-fstack-protector-all '
    + CPU_CCFLAGS + CCFLAGS_MOD,
    CCFLAGS_QSTR='-DNO_QSTR -DN_X64 -DN_X86 -DN_THUMB',
    LINKFLAGS='-T embed/boardloader/memory.ld -Wl,--gc-sections -Wl,-Map=build/boardloader/boardloader.map -Wl,--warn-common',
    CPPPATH=[
        'embed/boardloader',
        'embed/trezorhal',
        'embed/extmod/modtrezorui',
        'vendor/micropython/stmhal',
        'vendor/micropython/lib/stm32lib/STM32H7xx_HAL_Driver/Inc',
        'vendor/micropython/lib/stm32lib/CMSIS/STM32H7xx/Include',
        'vendor/micropython/lib/cmsis/inc',
    ] + CPPPATH_MOD,
    CPPDEFINES=[
        ('TREZOR_MODEL', '$TREZOR_MODEL'),
        CPU_MODEL,
        'CORE_CM7',
        'USE_HAL_DRIVER',
        ('STM32_HAL_H', '"<stm32h7xx.h>"'),
    ] + CPPDEFINES_MOD,
    ASFLAGS=CPU_ASFLAGS,
    ASPPFLAGS='$CFLAGS $CCFLAGS', )

#
# Program objects
#

obj_program = []
obj_program += env.Object(source=SOURCE_MOD)
obj_program += env.Object(source=SOURCE_BOARDLOADER)
obj_program += env.Object(source=SOURCE_STMHAL)
obj_program += env.Object(source=SOURCE_TREZORHAL)

program_elf = env.Command(
    target='boardloader.elf',
    source=obj_program,
    action=
    '$LINK -o $TARGET $CCFLAGS $CFLAGS $LINKFLAGS $SOURCES -lc_nano -lgcc',
)

program_bin = env.Command(
    target='boardloader.bin',
    source=program_elf,
    action='$OBJCOPY -O binary $SOURCE $TARGET',
)
